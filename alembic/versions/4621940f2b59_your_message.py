"""your message

Revision ID: 4621940f2b59
Revises: b5ce118d507e
Create Date: 2025-09-16 18:09:12.458860

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4621940f2b59'
down_revision: Union[str, Sequence[str], None] = 'b5ce118d507e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_task_reassigns_id'), table_name='task_reassigns')
    op.drop_table('task_reassigns')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_task_history_id'), table_name='task_history')
    op.drop_table('task_history')
    op.drop_index(op.f('ix_revoked_tokens_id'), table_name='revoked_tokens')
    op.drop_table('revoked_tokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('revoked_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('revoked_tokens_pkey')),
    sa.UniqueConstraint('token', name=op.f('revoked_tokens_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_revoked_tokens_id'), 'revoked_tokens', ['id'], unique=False)
    op.create_table('task_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status_before', postgresql.ENUM('pending', 'in_progress', 'completed', name='taskstatusenum'), autoincrement=False, nullable=True),
    sa.Column('status_after', postgresql.ENUM('pending', 'in_progress', 'completed', name='taskstatusenum'), autoincrement=False, nullable=True),
    sa.Column('hours_spent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('task_history_task_id_fkey')),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], name=op.f('task_history_updated_by_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('task_history_pkey'))
    )
    op.create_index(op.f('ix_task_history_id'), 'task_history', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assigned_to_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assigned_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'in_progress', 'completed', name='taskstatusenum'), autoincrement=False, nullable=True),
    sa.Column('hours_spent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_by_id'], ['users.id'], name='tasks_assigned_by_id_fkey'),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], name='tasks_assigned_to_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_table('task_reassigns',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('previous_assignee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('new_assignee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reassigned_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['new_assignee_id'], ['users.id'], name=op.f('task_reassigns_new_assignee_id_fkey')),
    sa.ForeignKeyConstraint(['previous_assignee_id'], ['users.id'], name=op.f('task_reassigns_previous_assignee_id_fkey')),
    sa.ForeignKeyConstraint(['reassigned_by_id'], ['users.id'], name=op.f('task_reassigns_reassigned_by_id_fkey')),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('task_reassigns_task_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('task_reassigns_pkey'))
    )
    op.create_index(op.f('ix_task_reassigns_id'), 'task_reassigns', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('admin', 'manager', 'employee', name='roleenum'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.VARCHAR(), server_default=sa.text("'9b884edf-b73c-4a60-8a97-aee225e2e550'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('users_created_by_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('users_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###
